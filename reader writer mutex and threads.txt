import threading

# Shared data and synchronization primitives
reader_count = 0
mutex = threading.Lock()  # Protects reader_count
rw_mutex = threading.Semaphore(1)  # Ensures writer's mutual exclusion

def reader(reader_id):
    global reader_count
    while True:
        # Entry section
        with mutex:
            reader_count += 1
            if reader_count == 1:  # First reader blocks writers
                rw_mutex.acquire()
        
        # Reading section
        print(f"Reader {reader_id} is reading.")
        
        # Exit section
        with mutex:
            reader_count -= 1
            if reader_count == 0:  # Last reader unblocks writers
                rw_mutex.release()
        
        # Simulate delay
        time.sleep(1)

def writer(writer_id):
    while True:
        # Entry section
        rw_mutex.acquire()
        
        # Writing section
        print(f"Writer {writer_id} is writing.")
        
        # Exit section
        rw_mutex.release()
        
        # Simulate delay
        time.sleep(1)

# Create threads for readers and writers
reader_threads = [threading.Thread(target=reader, args=(i,)) for i in range(5)]
writer_threads = [threading.Thread(target=writer, args=(i,)) for i in range(2)]

# Start threads
for t in reader_threads + writer_threads: t.start()
for t in reader_threads + writer_threads: t.join()




CODE FOR PRODUCER CONSUMER(MUTEX AND THREADS):
import threading
import time

# Shared resource
buffer = None  # Shared buffer for the string
mutex = threading.Lock()  # Mutex lock for synchronization
buffer_ready = threading.Event()  # Event to signal buffer availability

# Producer function
def producer():
    global buffer
    for i in range(5):  # Producing 5 strings
        time.sleep(1)  # Simulate time to produce
        with mutex:  # Lock the mutex
            buffer = f"String {i+1}"  # Produce a string
            print(f"Producer: Produced {buffer}")
        buffer_ready.set()  # Signal that the buffer is ready
        buffer_ready.clear()  # Reset the event for the next production

# Consumer function
def consumer():
    global buffer
    for i in range(5):  # Consuming 5 strings
        buffer_ready.wait()  # Wait until the buffer is ready
        with mutex:  # Lock the mutex
            print(f"Consumer: Consumed {buffer}")
            buffer = None  # Clear the buffer
        time.sleep(1)  # Simulate time to consume

# Main function
if __name__ == "__main__":
    # Declare two threads
    producer_thread = threading.Thread(target=producer)
    consumer_thread = threading.Thread(target=consumer)

    # Start the threads
    producer_thread.start()
    consumer_thread.start()

    # Wait for threads to complete
    producer_thread.join()
    consumer_thread.join()

    print("Producer and Consumer have finished execution.")
